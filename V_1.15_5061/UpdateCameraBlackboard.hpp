#ifndef UE4SS_SDK_UpdateCameraBlackboard_HPP
#define UE4SS_SDK_UpdateCameraBlackboard_HPP

class UUpdateCameraBlackboard_C : public UUpdateCameraBlackboardBTService
{
    class AFightingPlayerController* FightingPlayerC;
    FBlackboardKeySelector IsLocked;
    float Dt;
    FBlackboardKeySelector IsDodging;
    FBlackboardKeySelector IsAttacking;
    FBlackboardKeySelector IsHitted;
    FBlackboardKeySelector IsDead;
    FBlackboardKeySelector IsInFreeMove;
    FBlackboardKeySelector IsGuarding;
    FBlackboardKeySelector IsSpawning;
    class AActor* CurrentTarget;
    FBlackboardKeySelector InFlyMode;
    FBlackboardKeySelector IsInTakedown;
    FBlackboardKeySelector LeftStickYValue;
    FBlackboardKeySelector IsInTraversal;
    bool IsLockActive;
    FBlackboardKeySelector IsInConfrontation;
    FBlackboardKeySelector IsInPrepFocus;
    FBlackboardKeySelector IsInFocusExecution;
    FBlackboardKeySelector eVelocityKey;
    FBlackboardKeySelector IsInTraversalClimb;
    FBlackboardKeySelector IsKnockdown;
    uint8 PlayingTakedown;
    FBlackboardKeySelector InFocusValidated;
    FBlackboardKeySelector HasTargetLockMove;
    FBlackboardKeySelector IsInTraversalCinematic;
    FBlackboardKeySelector IsTgtOnSameSide;
    TArray<class AActor*> AIsInFight;
    FBlackboardKeySelector IsInSynchroAttackVictim;
    FBlackboardKeySelector WantLockOnTarget;
    FBlackboardKeySelector WantLockFollowing;
    bool WasActive;
    bool CamLockByAvoidSuccess;
    bool CamLockByParrySuccess;
    bool CamLockByKillSomething;
    FBlackboardKeySelector Is1v1;
    bool CamLockByThrow;
    FBlackboardKeySelector Falling;
    FCameraLookAtServiceBehavior LookAtReorientMidFight;
    int32 MidFightLockHandle;
    FBlackboardKeySelector TargetIsDown;
    bool CamInCollision;
    FBlackboardKeySelector AngleDiffBetweenCurrentAndWanted;
    FBlackboardKeySelector IsInDialog;
    FCameraLookAtServiceBehavior LookAtReorientMidFight_1v1;
    float TimerInCollision;
    FCameraLookAtServiceBehavior LookAtReorientCollision;
    int32 HandleFreezeMirrorFromSequence;
    int32 HandleFreezeMirrorFromAnimDrivenCam;
    FCameraLookAtServiceBehavior LookAtReorientCollision_1v1;
    int32 LookAtPauseHandleInAnimDrivenCam;
    class AFightingCharacter* CurrentTgt;
    FCameraLookAtServiceBehavior LookAtReorientPush;
    FBlackboardKeySelector IsInForcedTraversalCinematic;
    FBlackboardKeySelector IsInGenericAttackSync;
    class UOrderComponent* OrderComponentOwner;
    FBlackboardKeySelector AnimDrivenFov;
    int32 LockFreezeHandle;
    int32 HidingZoneRepulsionFreezeHandle;
    FBlackboardKeySelector AnimDrivenTakedownBlocked;
    FBlackboardKeySelector AnimDrivenFocusBlocked;
    FBlackboardKeySelector AnimDrivenAnimSyncGenericBlocked;
    FBlackboardKeySelector AnimDrivenAttackVictimBlocked;
    FTimerHandle DelayBeforeRush_Timer;
    float DelayBeforeConsideredInRush;
    bool WantDelayedRush;
    uint8 CurrentTakedownID;
    int32 DeadZoneRepulsionFreezeHandle;
    FBlackboardKeySelector IsInSynchroAttackVictimBoss;
    FCameraMirrorManagementConfig K2Node_MakeStruct_CameraMirrorManagementConfig;
    bool Temp_bool_Variable;
    float Temp_float_Variable;
    float Temp_float_Variable_1;
    EFightingActionState K2Node_Event__eStateEntered_1;
    bool K2Node_SwitchEnum_CmpSuccess;
    EFightingActionState K2Node_Event__eStateEntered;
    EMenuEnum K2Node_CustomEvent__ePrevMenu;
    EMenuEnum K2Node_CustomEvent__eNewMenu;
    bool K2Node_SwitchEnum_CmpSuccess_1;
    bool K2Node_SwitchEnum_CmpSuccess_2;
    class AActor* K2Node_Event_OwnerActor_2;
    float CallFunc_GetInputAnalogStickState_StickX;
    float CallFunc_GetInputAnalogStickState_StickY;
    FCameraMirrorManagementConfig K2Node_MakeStruct_CameraMirrorManagementConfig_1;
    EGlobalBehaviors K2Node_CustomEvent_eGLobalBehaviors;
    class AActor* K2Node_Event_OwnerActor_1;
    bool Temp_bool_Variable_1;
    FUpdateCameraBlackboard_CK2Node_CreateDelegate_OutputDelegate K2Node_CreateDelegate_OutputDelegate;
    void CurrentMenuChanged(EMenuEnum bpp___ePrevMenu__pf, EMenuEnum bpp___eNewMenu__pf);
    FUpdateCameraBlackboard_CK2Node_CreateDelegate_OutputDelegate_1 K2Node_CreateDelegate_OutputDelegate_1;
    void GlobalBehaviorChanged(EGlobalBehaviors bpp__eGLobalBehaviors__pf);
    class AAIDirectorActor* CallFunc_GetActorOfClass_ReturnValue;
    EFightingState K2Node_CustomEvent__eFightingState;
    bool K2Node_CustomEvent__bPush;
    FUpdateCameraBlackboard_CK2Node_CreateDelegate_OutputDelegate_2 K2Node_CreateDelegate_OutputDelegate_2;
    void FightingStateChanged(EFightingState bpp___eFightingState__pf, bool bpp___bPush__pf);
    EOrderType K2Node_Event__eOrderType_1;
    uint8 K2Node_Event__orderID_1;
    EOrderType K2Node_Event__eOrderType;
    uint8 K2Node_Event__orderID;
    FUpdateCameraBlackboard_CK2Node_CreateDelegate_OutputDelegate_3 K2Node_CreateDelegate_OutputDelegate_3;
    void OnFocusMechanicValidated(class AVitalPointActor* bpp___vitalPointSelected__pf);
    FUpdateCameraBlackboard_CK2Node_CreateDelegate_OutputDelegate_4 K2Node_CreateDelegate_OutputDelegate_4;
    void OnFocusMechanicStop(bool bpp___bCancel__pf);
    class AVitalPointActor* K2Node_CustomEvent_VitalPoint;
    bool K2Node_CustomEvent_Cancel;
    bool Temp_bool_Variable_2;
    bool CallFunc_TgtsOnSameSide_bool;
    FUpdateCameraBlackboard_CK2Node_CreateDelegate_OutputDelegate_5 K2Node_CreateDelegate_OutputDelegate_5;
    void OnAvoidSuccessDelegate(FHitRequest bpp___hitRequest__pf, FHitDefenseResult bpp___hitDefenseResult__pf);
    FUpdateCameraBlackboard_CK2Node_CreateDelegate_OutputDelegate_6 K2Node_CreateDelegate_OutputDelegate_6;
    void KilldDelegate(class AActor* bpp__Victim__pf, bool bpp___bIsOnlyAssist__pf, bool bpp___bKillingBlow__pf, class AActor* bpp___Instigator__pf, const FDamageInfos& bpp___damageInfos__pf);
    FUpdateCameraBlackboard_CK2Node_CreateDelegate_OutputDelegate_7 K2Node_CreateDelegate_OutputDelegate_7;
    void OrderStartingDynamicDelegate(uint8 bpp___ID__pf, class UOrderComponent* bpp___OrderComponent__pf);
    FUpdateCameraBlackboard_CK2Node_CreateDelegate_OutputDelegate_8 K2Node_CreateDelegate_OutputDelegate_8;
    void MovementModeChangedSignature(class ACharacter* bpp__Character__pf, TEnumAsByte<EMovementMode> bpp__PrevMovementMode__pf, uint8 bpp__PreviousCustomMode__pf);
    class ACharacter* K2Node_CustomEvent_Character;
    TEnumAsByte<EMovementMode> K2Node_CustomEvent_PrevMovementMode;
    uint8 K2Node_CustomEvent_PreviousCustomMode;
    FUpdateCameraBlackboard_CK2Node_CreateDelegate_OutputDelegate_9 K2Node_CreateDelegate_OutputDelegate_9;
    void OnCameraAnimDrivenStateChanged(ECameraTransitionState bpp___eNewState__pf);
    ECameraTransitionState K2Node_CustomEvent__eNewState;
    bool K2Node_SwitchEnum_CmpSuccess_3;
    class AActor* K2Node_Event_OwnerActor;
    float K2Node_Event_DeltaSeconds;
    FUpdateCameraBlackboard_CK2Node_CreateDelegate_OutputDelegate_10 K2Node_CreateDelegate_OutputDelegate_10;
    void DeathComponentDelegate();
    bool Temp_bool_Variable_3;
    uint8 K2Node_CustomEvent__ID_14;
    class UOrderComponent* K2Node_CustomEvent__OrderComponent_14;
    uint8 K2Node_CustomEvent__ID_13;
    class UOrderComponent* K2Node_CustomEvent__OrderComponent_13;
    FUpdateCameraBlackboard_CK2Node_CreateDelegate_OutputDelegate_11 K2Node_CreateDelegate_OutputDelegate_11;
    void OnAttackHitDymanic(const FAttackHitRequest& bpp___hitRequest__pf, const FImpactResult& bpp___impactResult__pf, class AActor* bpp___hittedActor__pf);
    FUpdateCameraBlackboard_CK2Node_CreateDelegate_OutputDelegate_12 K2Node_CreateDelegate_OutputDelegate_12;
    void OrderStartingDynamicDelegate(uint8 bpp___ID__pf, class UOrderComponent* bpp___OrderComponent__pf);
    uint8 K2Node_CustomEvent__ID_12;
    class UOrderComponent* K2Node_CustomEvent__OrderComponent_12;
    EGlobalBehaviors Temp_byte_Variable;
    FNetOrderStructTraversalCine CallFunc_GetBaseNetOrderStruct__outNetOrderStruct;
    uint8 K2Node_CustomEvent__ID_11;
    class UOrderComponent* K2Node_CustomEvent__OrderComponent_11;
    FUpdateCameraBlackboard_CK2Node_CreateDelegate_OutputDelegate_13 K2Node_CreateDelegate_OutputDelegate_13;
    void OrderStartingDynamicDelegate(uint8 bpp___ID__pf, class UOrderComponent* bpp___OrderComponent__pf);
    FUpdateCameraBlackboard_CK2Node_CreateDelegate_OutputDelegate_14 K2Node_CreateDelegate_OutputDelegate_14;
    void OrderStartingDynamicDelegate(uint8 bpp___ID__pf, class UOrderComponent* bpp___OrderComponent__pf);
    uint8 K2Node_CustomEvent__ID_10;
    class UOrderComponent* K2Node_CustomEvent__OrderComponent_10;
    FUpdateCameraBlackboard_CK2Node_CreateDelegate_OutputDelegate_15 K2Node_CreateDelegate_OutputDelegate_15;
    void OrderStartingDynamicDelegate(uint8 bpp___ID__pf, class UOrderComponent* bpp___OrderComponent__pf);
    FUpdateCameraBlackboard_CK2Node_CreateDelegate_OutputDelegate_16 K2Node_CreateDelegate_OutputDelegate_16;
    void OrderStartingDynamicDelegate(uint8 bpp___ID__pf, class UOrderComponent* bpp___OrderComponent__pf);
    uint8 K2Node_CustomEvent__ID_9;
    class UOrderComponent* K2Node_CustomEvent__OrderComponent_9;
    uint8 K2Node_CustomEvent__ID_8;
    class UOrderComponent* K2Node_CustomEvent__OrderComponent_8;
    bool CallFunc_IsHighPrioLDCameraOn_On;
    FUpdateCameraBlackboard_CK2Node_CreateDelegate_OutputDelegate_17 K2Node_CreateDelegate_OutputDelegate_17;
    void OrderStartingDynamicDelegate(uint8 bpp___ID__pf, class UOrderComponent* bpp___OrderComponent__pf);
    FUpdateCameraBlackboard_CK2Node_CreateDelegate_OutputDelegate_18 K2Node_CreateDelegate_OutputDelegate_18;
    void OrderStartingDynamicDelegate(uint8 bpp___ID__pf, class UOrderComponent* bpp___OrderComponent__pf);
    uint8 K2Node_CustomEvent__ID_7;
    class UOrderComponent* K2Node_CustomEvent__OrderComponent_7;
    uint8 K2Node_CustomEvent__ID_6;
    class UOrderComponent* K2Node_CustomEvent__OrderComponent_6;
    bool CallFunc_IsHighPrioLDCameraOn_On_1;
    FUpdateCameraBlackboard_CK2Node_CreateDelegate_OutputDelegate_19 K2Node_CreateDelegate_OutputDelegate_19;
    void OrderStartingDynamicDelegate(uint8 bpp___ID__pf, class UOrderComponent* bpp___OrderComponent__pf);
    FUpdateCameraBlackboard_CK2Node_CreateDelegate_OutputDelegate_20 K2Node_CreateDelegate_OutputDelegate_20;
    void OrderStartingDynamicDelegate(uint8 bpp___ID__pf, class UOrderComponent* bpp___OrderComponent__pf);
    bool Temp_bool_Variable_4;
    uint8 K2Node_CustomEvent__ID_5;
    class UOrderComponent* K2Node_CustomEvent__OrderComponent_5;
    uint8 K2Node_CustomEvent__ID_4;
    class UOrderComponent* K2Node_CustomEvent__OrderComponent_4;
    bool CallFunc_IsHighPrioLDCameraOn_On_2;
    uint8 K2Node_CustomEvent__ID_3;
    class UOrderComponent* K2Node_CustomEvent__OrderComponent_3;
    FNetOrderStructTakedown CallFunc_GetBaseNetOrderStruct__outNetOrderStruct_1;
    uint8 K2Node_CustomEvent__ID_2;
    class UOrderComponent* K2Node_CustomEvent__OrderComponent_2;
    class AFightingCharacter* K2Node_DynamicCast_AsFighting_Character;
    bool K2Node_DynamicCast_bSuccess;
    FAnimNotifyEvent CallFunc_FindNotifyByClass__outFoundNotify;
    bool CallFunc_FindNotifyByClass__bOutFound;
    FUpdateCameraBlackboard_CK2Node_CreateDelegate_OutputDelegate_21 K2Node_CreateDelegate_OutputDelegate_21;
    void OrderStartingDynamicDelegate(uint8 bpp___ID__pf, class UOrderComponent* bpp___OrderComponent__pf);
    FUpdateCameraBlackboard_CK2Node_CreateDelegate_OutputDelegate_22 K2Node_CreateDelegate_OutputDelegate_22;
    void OrderStartingDynamicDelegate(uint8 bpp___ID__pf, class UOrderComponent* bpp___OrderComponent__pf);
    bool CallFunc_IsHighPrioLDCameraOn_On_3;
    class UFightingMovementComponent* K2Node_DynamicCast_AsFighting_Movement_Component;
    bool K2Node_DynamicCast_bSuccess_1;
    class AFightingPlayerController* K2Node_DynamicCast_AsFighting_Player_Controller;
    bool K2Node_DynamicCast_bSuccess_2;
    float CallFunc_BreakVector_X;
    float CallFunc_BreakVector_Y;
    float CallFunc_BreakVector_Z;
    class UFightingMovementComponent* K2Node_DynamicCast_AsFighting_Movement_Component_1;
    bool K2Node_DynamicCast_bSuccess_3;
    float K2Node_Select_Default;
    TArray<class AActor*> CallFunc_BPF_GetValidTarget__arrayOfTarget;
    FMinimalViewInfo CallFunc_GetCameraView_DesiredView;
    bool Temp_bool_Variable_5;
    float CallFunc_BreakRotator_Roll;
    float CallFunc_BreakRotator_Pitch;
    float CallFunc_BreakRotator_Yaw;
    float CallFunc_BreakVector_X_1;
    float CallFunc_BreakVector_Y_1;
    float CallFunc_BreakVector_Z_1;
    FUpdateCameraBlackboard_CK2Node_CreateDelegate_OutputDelegate_23 K2Node_CreateDelegate_OutputDelegate_23;
    void CurrentMenuChanged(EMenuEnum bpp___ePrevMenu__pf, EMenuEnum bpp___eNewMenu__pf);
    class UPlayerAnim* K2Node_DynamicCast_AsPlayer_Anim;
    bool K2Node_DynamicCast_bSuccess_4;
    FUpdateCameraBlackboard_CK2Node_CreateDelegate_OutputDelegate_24 K2Node_CreateDelegate_OutputDelegate_24;
    void OrderStartingDynamicDelegate(uint8 bpp___ID__pf, class UOrderComponent* bpp___OrderComponent__pf);
    FUpdateCameraBlackboard_CK2Node_CreateDelegate_OutputDelegate_25 K2Node_CreateDelegate_OutputDelegate_25;
    void OrderStartingDynamicDelegate(uint8 bpp___ID__pf, class UOrderComponent* bpp___OrderComponent__pf);
    bool K2Node_SwitchEnum_CmpSuccess_4;
    FNetOrderStructTakedown CallFunc_GetBaseNetOrderStruct__outNetOrderStruct_2;
    class AFightingCharacter* K2Node_DynamicCast_AsFighting_Character_1;
    bool K2Node_DynamicCast_bSuccess_5;
    FUpdateCameraBlackboard_CK2Node_CreateDelegate_OutputDelegate_26 K2Node_CreateDelegate_OutputDelegate_26;
    void OrderStartingDynamicDelegate(uint8 bpp___ID__pf, class UOrderComponent* bpp___OrderComponent__pf);
    FUpdateCameraBlackboard_CK2Node_CreateDelegate_OutputDelegate_27 K2Node_CreateDelegate_OutputDelegate_27;
    void OrderStartingDynamicDelegate(uint8 bpp___ID__pf, class UOrderComponent* bpp___OrderComponent__pf);
    bool Temp_bool_Variable_6;
    bool Temp_bool_Variable_7;
    bool K2Node_Select_Default_1;
    uint8 K2Node_CustomEvent__ID_1;
    class UOrderComponent* K2Node_CustomEvent__OrderComponent_1;
    uint8 K2Node_CustomEvent__ID;
    class UOrderComponent* K2Node_CustomEvent__OrderComponent;
    bool CallFunc_IsHighPrioLDCameraOn_On_4;

    void UpdateVelocityKey();
    void UpdateTargetIsDown(class AActor* bpp__Object__pf);
    void UpdateLeftStickYKeyValue();
    void UpdateGuardingKey();
    void UpdateDialog();
    void UpdateCombatStatus();
    void UpdateCamInCollision(float bpp__DeltaTime__pf);
    void UpdateAngleDiff();
    void TraversalCineStart(uint8 bpp___ID__pf, class UOrderComponent* bpp___OrderComponent__pf);
    void ThrowSomeone(uint8 bpp___ID__pf, class UOrderComponent* bpp__NewParam__pf);
    void TgtsOnSameSide(bool& bpp__bool__pf);
    void SynchroAttackVictimStarted(uint8 bpp___ID__pf, class UOrderComponent* bpp___OrderComponent__pf);
    void SynchroAttackVictimEnded(uint8 bpp___ID__pf, class UOrderComponent* bpp___OrderComponent__pf);
    void SynchroAttackVictimBossStarted(uint8 bpp___ID__pf, class UOrderComponent* bpp___OrderComponent__pf);
    void SynchroAttackVictimBossEnded(uint8 bpp___ID__pf, class UOrderComponent* bpp___OrderComponent__pf);
    void StopTakedown();
    void SetInRush();
    void ReceiveTick(class AActor* bpp__OwnerActor__pf, float bpp__DeltaSeconds__pf);
    void ReceiveDeactivation(class AActor* bpp__OwnerActor__pf);
    void ReceiveActivation(class AActor* bpp__OwnerActor__pf);
    void OrderTakedownStarted(uint8 bpp___ID__pf, class UOrderComponent* bpp___OrderComponent__pf);
    void OrderTakedownEnded(uint8 bpp___ID__pf, class UOrderComponent* bpp___OrderComponent__pf);
    void OrderInvertPositionStarted(uint8 bpp___ID__pf, class UOrderComponent* bpp___OrderComponent__pf);
    void OrderInvertPositionEnded(uint8 bpp___ID__pf, class UOrderComponent* bpp___OrderComponent__pf);
    void OrderFocusInstigatorStarted(uint8 bpp___ID__pf, class UOrderComponent* bpp___OrderComponent__pf);
    void OrderFocusInstigatorEnded(uint8 bpp___ID__pf, class UOrderComponent* bpp___OrderComponent__pf);
    void OrderAttackKnockDownStarted(uint8 bpp___ID__pf, class UOrderComponent* bpp___OrderComponent__pf);
    void OrderAttackKnockDownEnded(uint8 bpp___ID__pf, class UOrderComponent* bpp___OrderComponent__pf);
    void OnTakedownTargetDeath();
    void OnFocusValidated(class AVitalPointActor* bpp__VitalPoint__pf);
    void OnFocusStopped(bool bpp__Cancel__pf);
    void OnFightingStateChanged(EFightingState bpp___eFightingState__pf, bool bpp___bPush__pf);
    void OnCameraAnimDrivenTransitionStateChanged(ECameraTransitionState bpp___eNewState__pf);
    void MovementModeChanged(class ACharacter* bpp__Character__pf, TEnumAsByte<EMovementMode> bpp__PrevMovementMode__pf, uint8 bpp__PreviousCustomMode__pf);
    void LaunchLookAtMidFight(FCameraLookAtServiceBehavior bpp__LookAtBehavior__pf, FString bpp__InString__pf__const);
    void LaunchLookAt(int32 bpp__NbAIStillActiveToTest__pf, FString bpp__InString__pf__const);
    void KillSomeone(class AActor* bpp__Victim__pf, bool bpp___bIsOnlyAssist__pf, bool bpp___bKillingBlow__pf, class AActor* bpp___Instigator__pf, FDamageInfos& bpp___damage__pf);
    void IsNotLockedOrNotInCombat();
    void IsLockedAndInCombat();
    void IsHighPrioLDCameraOn(bool& bpp__On__pf);
    void InitKeys();
    void Init();
    void HittedStarted(uint8 bpp___ID__pf, class UOrderComponent* bpp___OrderComponent__pf);
    void FreezeCombatAlgo(bool bpp__Freeze__pf, FString bpp__ContextString__pf__const, bool bpp__DisableDeadZoneRepulsion__pf);
    void EnteringLock();
    void DodgeLaunched();
    void CurrentMenuChanged(EMenuEnum bpp___ePrevMenu__pf, EMenuEnum bpp___eNewMenu__pf);
    void CanLaunchMidFightLookAt(int32 bpp__NbAIStillActiveToTest__pf, class AActor* bpp__RemovedxActor__pfT, FVector bpp__RefDir__pf, bool bpp__ByPassActiveLookAt__pf, float bpp__Range__pf, bool bpp__ByPassTgtSameSide__pf, bool& bpp__CanLaunch__pf);
    void CancelMidFightLookAt();
    void BPE_OnOrderStarting(EOrderType bpp___eOrderType__pf, uint8 bpp___orderId__pf);
    void BPE_OnOrderEnding(EOrderType bpp___eOrderType__pf, uint8 bpp___orderId__pf);
    void BPE_ExitState(EFightingActionState bpp___eStateEntered__pf);
    void BPE_EnterState(EFightingActionState bpp___eStateEntered__pf);
    void AvoidSuccess(const FHitRequest bpp___hitRequest__pf__const, const FHitDefenseResult bpp___hitDefenseResult__pf__const);
    void AttackStarted(uint8 bpp___ID__pf, class UOrderComponent* bpp___OrderComponent__pf);
    void AttackHit(const FAttackHitRequest& bpp___hitRequest__pf__const, const FImpactResult& bpp___impactResult__pf__const, class AActor* bpp___hittedActor__pf);
    void AreAIsOnSameSide(class AActor* bpp__RemovedActor__pf, FVector bpp__RefDir__pf, float bpp__Range__pf, bool& bpp__AreOnSameSide__pf);
    void AIGlobalBehaviorChanged(EGlobalBehaviors bpp__eGLobalBehaviors__pf);
    void OrderStartingDynamicDelegate__DelegateSignature(uint8 bpp___ID__pf, class UOrderComponent* bpp___OrderComponent__pf);
    void OnFocusMechanicValidated__DelegateSignature(class AVitalPointActor* bpp___vitalPointSelected__pf);
    void OnFocusMechanicStop__DelegateSignature(bool bpp___bCancel__pf);
    void OnCameraAnimDrivenStateChanged__DelegateSignature(ECameraTransitionState bpp___eNewState__pf);
    void OnAvoidSuccessDelegate__DelegateSignature(FHitRequest bpp___hitRequest__pf, FHitDefenseResult bpp___hitDefenseResult__pf);
    void OnAttackHitDymanic__DelegateSignature(const FAttackHitRequest& bpp___hitRequest__pf, const FImpactResult& bpp___impactResult__pf, class AActor* bpp___hittedActor__pf);
    void MovementModeChangedSignature__DelegateSignature(class ACharacter* bpp__Character__pf, TEnumAsByte<EMovementMode> bpp__PrevMovementMode__pf, uint8 bpp__PreviousCustomMode__pf);
    void KilldDelegate__DelegateSignature(class AActor* bpp__Victim__pf, bool bpp___bIsOnlyAssist__pf, bool bpp___bKillingBlow__pf, class AActor* bpp___Instigator__pf, const FDamageInfos& bpp___damageInfos__pf);
    void GlobalBehaviorChanged__DelegateSignature(EGlobalBehaviors bpp__eGLobalBehaviors__pf);
    void FightingStateChanged__DelegateSignature(EFightingState bpp___eFightingState__pf, bool bpp___bPush__pf);
    void DeathComponentDelegate__DelegateSignature();
    void CurrentMenuChanged__DelegateSignature(EMenuEnum bpp___ePrevMenu__pf, EMenuEnum bpp___eNewMenu__pf);
};

#endif
